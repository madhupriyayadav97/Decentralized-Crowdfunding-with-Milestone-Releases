// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Project {
    
    // Enums
    enum ProjectStatus { Active, Completed, Cancelled }
    enum MilestoneStatus { Pending, Completed, Disputed }
    
    // Structs
    struct Milestone {
        string description;
        uint256 amount;
        uint256 deadline;
        MilestoneStatus status;
        uint256 votesFor;
        uint256 votesAgainst;
        mapping(address => bool) hasVoted;
    }
    
    struct Campaign {
        address payable creator;
        string title;
        string description;
        uint256 targetAmount;
        uint256 raisedAmount;
        uint256 deadline;
        ProjectStatus status;
        uint256 milestoneCount;
        mapping(uint256 => Milestone) milestones;
        mapping(address => uint256) contributions;
        address[] contributors;
    }
    
    // State Variables
    mapping(uint256 => Campaign) public campaigns;
    uint256 public campaignCounter;
    uint256 public constant VOTING_PERIOD = 7 days;
    uint256 public constant MIN_VOTE_PERCENTAGE = 51; // 51% required for milestone approval
    
    // Events
    event CampaignCreated(uint256 indexed campaignId, address indexed creator, string title, uint256 targetAmount);
    event ContributionMade(uint256 indexed campaignId, address indexed contributor, uint256 amount);
    event MilestoneCompleted(uint256 indexed campaignId, uint256 indexed milestoneId, uint256 amount);
    event FundsReleased(uint256 indexed campaignId, uint256 indexed milestoneId, uint256 amount);
    event CampaignCancelled(uint256 indexed campaignId);
    event RefundIssued(uint256 indexed campaignId, address indexed contributor, uint256 amount);
    
    // Modifiers
    modifier onlyCreator(uint256 _campaignId) {
        require(campaigns[_campaignId].creator == msg.sender, "Only campaign creator can call this function");
        _;
    }
    
    modifier onlyContributor(uint256 _campaignId) {
        require(campaigns[_campaignId].contributions[msg.sender] > 0, "Only contributors can call this function");
        _;
    }
    
    modifier campaignExists(uint256 _campaignId) {
        require(_campaignId < campaignCounter, "Campaign does not exist");
        _;
    }
    
    modifier campaignActive(uint256 _campaignId) {
        require(campaigns[_campaignId].status == ProjectStatus.Active, "Campaign is not active");
        _;
    }
    
    // Core Function 1: Create Campaign with Milestones
    function createCampaign(
        string memory _title,
        string memory _description,
        uint256 _targetAmount,
        uint256 _deadline,
        string[] memory _milestoneDescriptions,
        uint256[] memory _milestoneAmounts,
        uint256[] memory _milestoneDeadlines
    ) external returns (uint256) {
        require(_targetAmount > 0, "Target amount must be greater than 0");
        require(_deadline > block.timestamp, "Deadline must be in the future");
        require(_milestoneDescriptions.length == _milestoneAmounts.length && 
                _milestoneAmounts.length == _milestoneDeadlines.length, "Milestone arrays length mismatch");
        require(_milestoneDescriptions.length > 0, "At least one milestone required");
        
        // Verify milestone amounts sum to target amount
        uint256 totalMilestoneAmount = 0;
        for (uint256 i = 0; i < _milestoneAmounts.length; i++) {
            totalMilestoneAmount += _milestoneAmounts[i];
            require(_milestoneDeadlines[i] > block.timestamp && _milestoneDeadlines[i] <= _deadline, 
                    "Invalid milestone deadline");
        }
        require(totalMilestoneAmount == _targetAmount, "Milestone amounts must sum to target amount");
        
        uint256 campaignId = campaignCounter++;
        Campaign storage newCampaign = campaigns[campaignId];
        
        newCampaign.creator = payable(msg.sender);
        newCampaign.title = _title;
        newCampaign.description = _description;
        newCampaign.targetAmount = _targetAmount;
        newCampaign.deadline = _deadline;
        newCampaign.status = ProjectStatus.Active;
        newCampaign.milestoneCount = _milestoneDescriptions.length;
        
        // Create milestones
        for (uint256 i = 0; i < _milestoneDescriptions.length; i++) {
            Milestone storage milestone = newCampaign.milestones[i];
            milestone.description = _milestoneDescriptions[i];
            milestone.amount = _milestoneAmounts[i];
            milestone.deadline = _milestoneDeadlines[i];
            milestone.status = MilestoneStatus.Pending;
        }
        
        emit CampaignCreated(campaignId, msg.sender, _title, _targetAmount);
        return campaignId;
    }
    
    // Core Function 2: Contribute to Campaign
    function contribute(uint256 _campaignId) external payable campaignExists(_campaignId) campaignActive(_campaignId) {
        require(msg.value > 0, "Contribution must be greater than 0");
        require(block.timestamp <= campaigns[_campaignId].deadline, "Campaign deadline has passed");
        
        Campaign storage campaign = campaigns[_campaignId];
        require(campaign.raisedAmount + msg.value <= campaign.targetAmount, "Contribution exceeds target amount");
        
        // Track new contributors
        if (campaign.contributions[msg.sender] == 0) {
            campaign.contributors.push(msg.sender);
        }
        
        campaign.contributions[msg.sender] += msg.value;
        campaign.raisedAmount += msg.value;
        
        emit ContributionMade(_campaignId, msg.sender, msg.value);
    }
    
    // Core Function 3: Release Milestone Funds
    function releaseMilestoneFunds(uint256 _campaignId, uint256 _milestoneId) 
        external 
        campaignExists(_campaignId) 
        campaignActive(_campaignId) 
        onlyCreator(_campaignId) 
    {
        Campaign storage campaign = campaigns[_campaignId];
        require(_milestoneId < campaign.milestoneCount, "Invalid milestone ID");
        require(campaign.raisedAmount == campaign.targetAmount, "Campaign not fully funded");
        
        Milestone storage milestone = campaign.milestones[_milestoneId];
        require(milestone.status == MilestoneStatus.Pending, "Milestone not in pending status");
        require(block.timestamp <= milestone.deadline, "Milestone deadline has passed");
        
        // Check if previous milestones are completed (if any)
        if (_milestoneId > 0) {
            require(campaign.milestones[_milestoneId - 1].status == MilestoneStatus.Completed, 
                    "Previous milestone not completed");
        }
        
        // Start voting period - in a real implementation, this would trigger a voting mechanism
        // For simplicity, we'll assume creator can release if deadline hasn't passed
        milestone.status = MilestoneStatus.Completed;
        
        // Transfer funds to creator
        campaign.creator.transfer(milestone.amount);
        
        // Check if all milestones are completed
        bool allCompleted = true;
        for (uint256 i = 0; i < campaign.milestoneCount; i++) {
            if (campaign.milestones[i].status != MilestoneStatus.Completed) {
                allCompleted = false;
                break;
            }
        }
        
        if (allCompleted) {
            campaign.status = ProjectStatus.Completed;
        }
        
        emit MilestoneCompleted(_campaignId, _milestoneId, milestone.amount);
        emit FundsReleased(_campaignId, _milestoneId, milestone.amount);
    }
    
    // Additional Functions
    function voteMilestone(uint256 _campaignId, uint256 _milestoneId, bool _support) 
        external 
        campaignExists(_campaignId) 
        onlyContributor(_campaignId) 
    {
        Campaign storage campaign = campaigns[_campaignId];
        require(_milestoneId < campaign.milestoneCount, "Invalid milestone ID");
        
        Milestone storage milestone = campaign.milestones[_milestoneId];
        require(!milestone.hasVoted[msg.sender], "Already voted");
        
        milestone.hasVoted[msg.sender] = true;
        
        if (_support) {
            milestone.votesFor++;
        } else {
            milestone.votesAgainst++;
        }
    }
    
    function cancelCampaign(uint256 _campaignId) 
        external 
        campaignExists(_campaignId) 
        onlyCreator(_campaignId) 
        campaignActive(_campaignId) 
    {
        campaigns[_campaignId].status = ProjectStatus.Cancelled;
        emit CampaignCancelled(_campaignId);
    }
    
    function claimRefund(uint256 _campaignId) 
        external 
        campaignExists(_campaignId) 
        onlyContributor(_campaignId) 
    {
        Campaign storage campaign = campaigns[_campaignId];
        require(campaign.status == ProjectStatus.Cancelled || 
                (block.timestamp > campaign.deadline && campaign.raisedAmount < campaign.targetAmount), 
                "Refund not available");
        
        uint256 contributionAmount = campaign.contributions[msg.sender];
        require(contributionAmount > 0, "No contribution to refund");
        
        campaign.contributions[msg.sender] = 0;
        payable(msg.sender).transfer(contributionAmount);
        
        emit RefundIssued(_campaignId, msg.sender, contributionAmount);
    }
    
    // View Functions
    function getCampaignDetails(uint256 _campaignId) 
        external 
        view 
        campaignExists(_campaignId) 
        returns (
            address creator,
            string memory title,
            string memory description,
            uint256 targetAmount,
            uint256 raisedAmount,
            uint256 deadline,
            ProjectStatus status,
            uint256 milestoneCount
        ) 
    {
        Campaign storage campaign = campaigns[_campaignId];
        return (
            campaign.creator,
            campaign.title,
            campaign.description,
            campaign.targetAmount,
            campaign.raisedAmount,
            campaign.deadline,
            campaign.status,
            campaign.milestoneCount
        );
    }
    
    function getMilestoneDetails(uint256 _campaignId, uint256 _milestoneId) 
        external 
        view 
        campaignExists(_campaignId) 
        returns (
            string memory description,
            uint256 amount,
            uint256 deadline,
            MilestoneStatus status,
            uint256 votesFor,
            uint256 votesAgainst
        ) 
    {
        require(_milestoneId < campaigns[_campaignId].milestoneCount, "Invalid milestone ID");
        Milestone storage milestone = campaigns[_campaignId].milestones[_milestoneId];
        return (
            milestone.description,
            milestone.amount,
            milestone.deadline,
            milestone.status,
            milestone.votesFor,
            milestone.votesAgainst
        );
    }
    
    function getContribution(uint256 _campaignId, address _contributor) 
        external 
        view 
        campaignExists(_campaignId) 
        returns (uint256) 
    {
        return campaigns[_campaignId].contributions[_contributor];
    }
}
